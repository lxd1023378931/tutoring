<ehcache>

	<!-- Sets the path to the directory where cache .data files are created. 
		If the path is a Java System Property it is replaced by its value in the 
		running VM. The following properties are translated: user.home - User's home 
		directory user.dir - User's current working directory java.io.tmpdir - Default 
		temp file path -->

	<!--指定二级缓存存放在磁盘上的位置 -->
	<diskStore path="ehcache.data" />

	<!--我们可以给每个实体类指定一个对应的缓存，如果没有匹配到该类，则使用这个默认的缓存配置 -->
	<!-- maxElementsInMemory:在内存中存放的最大对象数 -->
	<!-- eternal:是否永久保存缓存，设置成false -->
	<!-- overflowToDisk:如果对象数量超过内存中最大的数，是否将其保存到磁盘中，设置成true -->
	<!-- 1、timeToLiveSeconds的定义是：以创建时间为基准开始计算的超时时长； 2、timeToIdleSeconds的定义是：在创建时间和最近访问时间中取出离现在最近的时间作为基准计算的超时时长； 
		3、如果仅设置了timeToLiveSeconds，则该对象的超时时间=创建时间+timeToLiveSeconds，假设为A； 4、如果没设置timeToLiveSeconds，则该对象的超时时间=max(创建时间，最近访问时间)+timeToIdleSeconds，假设为B； 
		5、如果两者都设置了，则取出A、B最少的值，即min(A,B)，表示只要有一个超时成立即算超时。 -->
	<defaultCache maxElementsInMemory="10000" 　 eternal="false" 　
		timeToIdleSeconds="120" timeToLiveSeconds="120" overflowToDisk="true" 　 />

	<!--可以给每个实体类指定一个配置文件，通过name属性指定，要使用类的全名 -->
	<cache name="com.uzak.tutoring.entity.Manager"
		maxElementsInMemory="10000" eternal="false" timeToIdleSeconds="300"
		timeToLiveSeconds="600" overflowToDisk="true" />
	<!-- 二级缓存的使用策略一般有这几种：read-only、nonstrict-read-write、read-write、transactional。注意：我们通常使用二级缓存都是将其配置成 
		read-only ，即我们应当在那些不需要进行修改的实体类上使用二级缓存，否则如果对缓存进行读写的话，性能会变差，这样设置缓存就失去了意义。 -->

	<!-- 只读（read-only)： 对于永远不会被修改的数据可以采用这种并发访问策略，它的并发性能是最高的。但必须保证数据不会被修改，否则就会出错。 
		非严格读写（nonstrict-read-write): 非严格读写不能保证缓存与数据库中数据的一致性，如果存在两个事务并发地访问缓存数据的可能，则应该为该数据配置一个很短的过期时间，以减少读脏数据的可能。对于极少被修改，并且可以容忍偶尔脏读的数据可以采用这种并发策略。 
		读写（read-write)： 读写策略提供了“read committed"数据库隔离级别。对于经常被读但很少修改的数据可以采用这种策略，它可以防止读脏数据。 
		事务（transactional）： 它提供了Repeatable Read事务隔离级别。它可以防止脏读和不可重复读这类的并发问题。 -->

</ehcache>